[{"D:\\react\\4\\linto-demo\\src\\index.js":"1","D:\\react\\4\\linto-demo\\src\\App.js":"2","D:\\react\\4\\linto-demo\\src\\components\\Waveform.js":"3","D:\\react\\4\\linto-demo\\src\\components\\VideoAudio.js":"4","D:\\react\\4\\linto-demo\\src\\components\\Video.js":"5","D:\\react\\4\\linto-demo\\src\\components\\IHM.js":"6","D:\\react\\4\\linto-demo\\src\\components\\CustomSlider.js":"7","D:\\react\\4\\linto-demo\\src\\components\\Provider.js":"8","D:\\react\\4\\linto-demo\\src\\components\\Button.js":"9","D:\\react\\4\\linto-demo\\src\\page\\DemoVideoAudio.js":"10","D:\\react\\4\\linto-demo\\src\\components\\VideoAmi.js":"11","D:\\react\\4\\linto-demo\\src\\components\\Video4Player.js":"12","D:\\react\\4\\linto-demo\\src\\data\\colors.js":"13","D:\\react\\4\\linto-demo\\src\\components\\Map.js":"14","D:\\react\\4\\linto-demo\\src\\components\\CustomSwitch.js":"15","D:\\react\\4\\linto-demo\\src\\components\\CustomSelect.js":"16","D:\\react\\7\\linto-demo\\src\\components\\CustomSelect.js":"17","D:\\react\\7\\linto-demo\\src\\components\\Button.js":"18","D:\\react\\7\\linto-demo\\src\\components\\Video4Player.js":"19","D:\\react\\7\\linto-demo\\src\\components\\Video.js":"20","D:\\react\\7\\linto-demo\\src\\index.js":"21","D:\\react\\7\\linto-demo\\src\\App.js":"22","D:\\react\\7\\linto-demo\\src\\page\\DemoVideoAudio.js":"23","D:\\react\\7\\linto-demo\\src\\components\\Provider.js":"24","D:\\react\\7\\linto-demo\\src\\components\\IHM.js":"25","D:\\react\\7\\linto-demo\\src\\components\\VideoAudio.js":"26","D:\\react\\7\\linto-demo\\src\\components\\CustomSwitch.js":"27","D:\\react\\7\\linto-demo\\src\\components\\CustomSlider.js":"28","D:\\react\\7\\linto-demo\\src\\components\\VideoAmi.js":"29","D:\\react\\7\\linto-demo\\src\\components\\Waveform.js":"30","D:\\react\\7\\linto-demo\\src\\components\\Map.js":"31","D:\\react\\7\\linto-demo\\src\\data\\colors.js":"32","D:\\react\\7\\linto-demo\\src\\components\\Transcript.js":"33","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\index.js":"34","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\timecode-converter\\index.js":"35","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\export-adapters\\slate-to-dpe\\index.js":"36","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\dpe-to-slate\\index.js":"37","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\components\\index.js":"38","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\export-adapters\\txt\\index.js":"39","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\timecode-converter\\src\\secondsToTimecode.js":"40","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\timecode-converter\\src\\padTimeToTimecode.js":"41","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\timecode-converter\\src\\timecodeToSeconds.js":"42"},{"size":278,"mtime":1610455538105,"results":"43","hashOfConfig":"44"},{"size":376,"mtime":1610455713037,"results":"45","hashOfConfig":"44"},{"size":6436,"mtime":1610458997559,"results":"46","hashOfConfig":"44"},{"size":7305,"mtime":1610455834013,"results":"47","hashOfConfig":"44"},{"size":4490,"mtime":1610462619238,"results":"48","hashOfConfig":"44"},{"size":7894,"mtime":1610459849712,"results":"49","hashOfConfig":"44"},{"size":1055,"mtime":1608126779408,"results":"50","hashOfConfig":"44"},{"size":2380,"mtime":1610458361006,"results":"51","hashOfConfig":"44"},{"size":798,"mtime":1610453358827,"results":"52","hashOfConfig":"44"},{"size":867,"mtime":1608242551007,"results":"53","hashOfConfig":"44"},{"size":1950,"mtime":1610385592017,"results":"54","hashOfConfig":"44"},{"size":4511,"mtime":1610454624063,"results":"55","hashOfConfig":"44"},{"size":132,"mtime":1608715999706,"results":"56","hashOfConfig":"44"},{"size":2340,"mtime":1608658898574,"results":"57","hashOfConfig":"44"},{"size":1042,"mtime":1610447619890,"results":"58","hashOfConfig":"44"},{"size":904,"mtime":1610459739791,"results":"59","hashOfConfig":"44"},{"size":904,"mtime":1610542104976,"results":"60","hashOfConfig":"61"},{"size":798,"mtime":1610542104976,"results":"62","hashOfConfig":"61"},{"size":4511,"mtime":1610542104982,"results":"63","hashOfConfig":"61"},{"size":4580,"mtime":1613902764430,"results":"64","hashOfConfig":"61"},{"size":278,"mtime":1610542105367,"results":"65","hashOfConfig":"61"},{"size":451,"mtime":1612425864158,"results":"66","hashOfConfig":"61"},{"size":867,"mtime":1608242551007,"results":"67","hashOfConfig":"61"},{"size":2645,"mtime":1612437200897,"results":"68","hashOfConfig":"61"},{"size":8805,"mtime":1612425864171,"results":"69","hashOfConfig":"61"},{"size":6884,"mtime":1612442803213,"results":"70","hashOfConfig":"61"},{"size":1042,"mtime":1610542104977,"results":"71","hashOfConfig":"61"},{"size":1055,"mtime":1608126779408,"results":"72","hashOfConfig":"61"},{"size":1950,"mtime":1610542104982,"results":"73","hashOfConfig":"61"},{"size":5430,"mtime":1612442220977,"results":"74","hashOfConfig":"61"},{"size":2340,"mtime":1610542104979,"results":"75","hashOfConfig":"61"},{"size":132,"mtime":1610542105016,"results":"76","hashOfConfig":"61"},{"size":1832,"mtime":1612425864206,"results":"77","hashOfConfig":"61"},{"size":608,"mtime":1612425865126,"results":"78","hashOfConfig":"61"},{"size":1245,"mtime":1612425865458,"results":"79","hashOfConfig":"61"},{"size":2661,"mtime":1612425865293,"results":"80","hashOfConfig":"61"},{"size":5290,"mtime":1612425865269,"results":"81","hashOfConfig":"61"},{"size":11888,"mtime":1612427391391,"results":"82","hashOfConfig":"61"},{"size":1543,"mtime":1612425865444,"results":"83","hashOfConfig":"61"},{"size":1641,"mtime":1612425865480,"results":"84","hashOfConfig":"61"},{"size":1295,"mtime":1612425865462,"results":"85","hashOfConfig":"61"},{"size":840,"mtime":1612425865508,"results":"86","hashOfConfig":"61"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y2m4vj",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"6kf06w",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"124"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"124"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"124"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"D:\\react\\4\\linto-demo\\src\\index.js",[],"D:\\react\\4\\linto-demo\\src\\App.js",[],["178","179"],"D:\\react\\4\\linto-demo\\src\\components\\Waveform.js",[],"D:\\react\\4\\linto-demo\\src\\components\\VideoAudio.js",[],"D:\\react\\4\\linto-demo\\src\\components\\Video.js",[],"D:\\react\\4\\linto-demo\\src\\components\\IHM.js",[],"D:\\react\\4\\linto-demo\\src\\components\\CustomSlider.js",[],["180","181"],"D:\\react\\4\\linto-demo\\src\\components\\Provider.js",[],"D:\\react\\4\\linto-demo\\src\\components\\Button.js",[],"D:\\react\\4\\linto-demo\\src\\page\\DemoVideoAudio.js",[],"D:\\react\\4\\linto-demo\\src\\components\\VideoAmi.js",[],"D:\\react\\4\\linto-demo\\src\\components\\Video4Player.js",[],"D:\\react\\4\\linto-demo\\src\\data\\colors.js",[],["182","183"],"D:\\react\\4\\linto-demo\\src\\components\\Map.js",[],"D:\\react\\4\\linto-demo\\src\\components\\CustomSwitch.js",[],"D:\\react\\4\\linto-demo\\src\\components\\CustomSelect.js",[],"D:\\react\\7\\linto-demo\\src\\components\\CustomSelect.js",[],["184","185"],"D:\\react\\7\\linto-demo\\src\\components\\Button.js",[],"D:\\react\\7\\linto-demo\\src\\components\\Video4Player.js",[],"D:\\react\\7\\linto-demo\\src\\components\\Video.js",[],"D:\\react\\7\\linto-demo\\src\\index.js",[],"D:\\react\\7\\linto-demo\\src\\App.js",[],"D:\\react\\7\\linto-demo\\src\\page\\DemoVideoAudio.js",[],"D:\\react\\7\\linto-demo\\src\\components\\Provider.js",[],"D:\\react\\7\\linto-demo\\src\\components\\IHM.js",[],"D:\\react\\7\\linto-demo\\src\\components\\VideoAudio.js",[],"D:\\react\\7\\linto-demo\\src\\components\\CustomSwitch.js",[],"D:\\react\\7\\linto-demo\\src\\components\\CustomSlider.js",[],"D:\\react\\7\\linto-demo\\src\\components\\VideoAmi.js",[],"D:\\react\\7\\linto-demo\\src\\components\\Waveform.js",["186","187","188"],"import \"./Waveform.css\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\nimport WaveSurfer from \"wavesurfer.js\";\r\nimport TimelinePlugin from \"wavesurfer.js/dist/plugin/wavesurfer.timeline.min.js\";\r\nimport RegionPlugin from \"wavesurfer.js/dist/plugin/wavesurfer.regions.min.js\";\r\n\r\nimport colors from \"../data/colors\";\r\n\r\nimport { useGlobalContext } from \"./Provider\";\r\n\r\nconst formWaveSurferOptions = (ref, timelineRef) => ({\r\n  container: ref,\r\n  waveColor: \"#eee\",\r\n  progressColor: \"#e1bee7\",\r\n  cursorColor: \"#ce93d8\",\r\n  waveColor: \"#757575\",\r\n  progressColor: \"#424242\",\r\n  cursorColor: \"#424242\",\r\n  backend: \"MediaElement\",\r\n  barWidth: 3,\r\n  barRadius: 3,\r\n  responsive: false,\r\n  hideScrollbar: true,\r\n\r\n  plugins: [\r\n    RegionPlugin.create(),\r\n    TimelinePlugin.create({\r\n      container: timelineRef,\r\n    }),\r\n  ],\r\n\r\n  autoCenter: true,\r\n  height: 100,\r\n  normalize: true,\r\n\r\n  // Use the PeakCac he to improve rendering speed of large waveforms.\r\n  // partialRender: true,\r\n});\r\n\r\nexport default function Waveform({\r\n  url,\r\n  zoom,\r\n  synch,\r\n  setSynch,\r\n  play,\r\n  volume,\r\n  setAudioLoaded,\r\n  setDurationSec,\r\n}) {\r\n  const waveformRef = useRef(null);\r\n  const timelineRef = useRef(null);\r\n  const wavesurfer = useRef(null);\r\n\r\n  const { confDemo, Annotation, Player } = useGlobalContext();\r\n  const { getConf } = confDemo;\r\n  const { setAnnot, getAnnot } = Annotation;\r\n  const { setTime } = Player;\r\n\r\n  setAudioLoaded(true);\r\n\r\n  useEffect(() => {\r\n    console.log(\"new isntance\");\r\n    setAudioLoaded(false);\r\n    // setPlay(false);\r\n    const options = formWaveSurferOptions(\r\n      waveformRef.current,\r\n      timelineRef.current\r\n    );\r\n    wavesurfer.current = WaveSurfer.create(options);\r\n    wavesurfer.current.load(url);\r\n\r\n    // Pausing audio\r\n    wavesurfer.current.on(\"pause\", function() {\r\n      console.log(\"Pause\");\r\n      // setIsPlaying(false);\r\n    });\r\n\r\n    // Playing audio\r\n    wavesurfer.current.on(\"play\", function() {\r\n      console.log(\"Play\");\r\n      // setIsPlaying(true);\r\n      setDurationSec(wavesurfer.current.getCurrentTime());\r\n    });\r\n\r\n    // Audioprocess: fire continously when audio is playing\r\n    wavesurfer.current.on(\"audioprocess\", function() {\r\n      setTime(wavesurfer.current.getCurrentTime());\r\n    });\r\n\r\n    wavesurfer.current.on(\"waveform-ready\", function() {\r\n      // console.log(\"ready\");\r\n      if (wavesurfer.current) {\r\n        wavesurfer.current.setVolume(volume);\r\n      }\r\n      fakeRegion();\r\n      setAudioLoaded(true);\r\n    });\r\n\r\n    wavesurfer.current.on(\"seek\", function() {\r\n      console.log(\"seek\");\r\n      setDurationSec(wavesurfer.current.getCurrentTime());\r\n      setTime(wavesurfer.current.getCurrentTime());\r\n    });\r\n\r\n    return () => wavesurfer.current.destroy();\r\n    // eslint-disable-next-line\r\n  }, [url]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"current time : \");\r\n  //   console.log(wavesurfer);\r\n  //   console.log(wavesurfer.current.getCurrentTime());\r\n  //   setDurationSec(wavesurfer.current.getCurrentTime());\r\n  //   setTime(wavesurfer.current.getCurrentTime());\r\n  //   setSynch(false);\r\n  //   // eslint-disable-next-line\r\n  // }, [synch]);\r\n\r\n  useEffect(() => {\r\n    wavesurfer.current.zoom(zoom || 1);\r\n  }, [zoom]);\r\n\r\n  useEffect(() => {\r\n    wavesurfer.current.setVolume(volume || 1);\r\n  }, [volume]);\r\n\r\n  useEffect(() => {\r\n    if (play !== wavesurfer.current.isPlaying()) {\r\n      console.log(\"Play and after IsPlaying\");\r\n      console.log(play);\r\n\r\n      console.log(wavesurfer.current.isPlaying());\r\n      wavesurfer.current.playPause();\r\n    }\r\n  }, [play]);\r\n\r\n  const changeTimeline = getConf().annotation && getConf().locuteurActif;\r\n  useEffect(() => {\r\n    if (changeTimeline) {\r\n      getAnnot().map((o) => handleAddRegionSimple(o));\r\n    } else {\r\n      wavesurfer.current.clearRegions();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [changeTimeline]);\r\n\r\n  const valueLocuteur = getConf().seuilLocuteur;\r\n  useEffect(() => {\r\n    if (changeTimeline) {\r\n      wavesurfer.current.clearRegions();\r\n      getAnnot().map((o) => handleAddRegionSimple(o));\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [valueLocuteur]);\r\n\r\n  const fakeRegion = () => {\r\n    console.log(\"Duration of clip : \" + wavesurfer.current.getDuration());\r\n    let list = [];\r\n    let increment = 1;\r\n    for (var i = 0; i <= wavesurfer.current.getDuration(); i = i + increment) {\r\n      increment = Math.random() * (5 - 1) + 1;\r\n      let listItem = {};\r\n      listItem[\"start\"] = i;\r\n      listItem[\"end\"] = i + increment;\r\n      const cosCalculate = Math.abs(Math.cos(i));\r\n      listItem[\"confidence\"] = cosCalculate;\r\n      listItem[\"label\"] = (Math.floor(Math.random() * (6 - 0)) + 0).toString();\r\n      list.push(listItem);\r\n    }\r\n    setAnnot(list);\r\n    if (getConf().map) {\r\n      list.map((o) => handleAddRegionSimple(o));\r\n    }\r\n    console.log(list);\r\n  };\r\n\r\n  const handleAddRegionSimple = (analyse) => {\r\n    if (analyse.label < 4) {\r\n      if (analyse.confidence > valueLocuteur) {\r\n        wavesurfer.current.addRegion({\r\n          start: analyse.start,\r\n          end: analyse.end,\r\n          color: colors[analyse.label],\r\n          drag: false,\r\n          resize: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <div className=\"waveform\" id=\"waveform\" ref={waveformRef} />\r\n      <div id=\"timelineRef\" ref={timelineRef} />\r\n    </div>\r\n  );\r\n}\r\n","D:\\react\\7\\linto-demo\\src\\components\\Map.js",[],"D:\\react\\7\\linto-demo\\src\\data\\colors.js",[],"D:\\react\\7\\linto-demo\\src\\components\\Transcript.js",[],"D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\index.js",[],"D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\timecode-converter\\index.js",[],"D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\export-adapters\\slate-to-dpe\\index.js",[],"D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\dpe-to-slate\\index.js",["189"],"import { shortTimecode } from \"../timecode-converter\";\r\n\r\n/**\r\n *\r\n * `generatePreviousTimings` and `generatePreviousTimingsUpToCurrent`\r\n * are used to add a `previousTimings` data attribute\r\n * to the paragraph `TimedTextElement` in `renderElement`\r\n * This makes it possible to do css injection to hilight current timings\r\n * `.timecode[data-previous-timings*=\"${listOfPreviousTimingsUpToCurrentOne}\"]\r\n *\r\n * where `listOfPreviousTimingsUpToCurrentOne` is dinamically generated up to the current one.\r\n * eg if current time is `3` then `listOfPreviousTimingsUpToCurrentOne` \"0 1 2\"\r\n */\r\n\r\n/**\r\n * Generate a list of times, each rounded up to int.\r\n * from zero to the provided `time`.\r\n * eg if `time` is 6, the list would be [0, 1, 2, 3, 4, 5]\r\n * @param {Number} time - float, time in seconds\r\n */\r\n\r\nexport const generatePreviousTimings = (time) => {\r\n  // https://stackoverflow.com/questions/3746725/how-to-create-an-array-containing-1-n\r\n  return [...Array(parseInt(time)).keys()];\r\n};\r\n\r\n/**\r\n * splices a list of times, int, up to a certain, index current time.\r\n * eg  `totalTimingsInt` is [0, 1, 2, 3, 4, 5] and `time` is 3, it retusn \"0 1 2\"\r\n * then it returns\r\n * @param {Array} totalTimingsInt -  list of timings int, generated with `generatePreviousTimings`\r\n * @param {Number} time - float, time in seconds\r\n * @returns {String}\r\n */\r\n// const generatePreviousTimingsUpToCurrent = (totalTimingsInt, time) => {\r\n//   return totalTimingsInt.splice(0, time, 0).join(\" \");\r\n// };\r\n\r\nfunction isEmpty(obj) {\r\n  return Object.keys(obj).length === 0;\r\n}\r\n\r\n//Take complematory circle\r\nconst offset = 360 / 8 + 15 / 8;\r\nconst generateColor = (id) => {\r\n  const h = Math.round((id * offset) % 360);\r\n  return `hsl(${h}, 35%, 50%)`;\r\n};\r\n\r\nconst generatePreviousTimingsUpToCurrent = (totalTimingsInt, time) => {\r\n  return totalTimingsInt.splice(0, time, 0).join(\" \");\r\n};\r\n\r\nconst generateTotalTimings = (words) => {\r\n  return generatePreviousTimings(words[words.length - 1].start);\r\n};\r\n\r\nexport const generatePreviousTimingsUpToCurrentOne = (words, start) => {\r\n  return generatePreviousTimingsUpToCurrent(generateTotalTimings(words), start);\r\n};\r\n\r\nconst convertDpeToSlate = (transcript) => {\r\n  if (isEmpty(transcript)) {\r\n    return [\r\n      {\r\n        speaker: \"U_UKN\",\r\n        actDialog: \"Pas d'acte de language\",\r\n        start: 0,\r\n        previousTimings: \"0\",\r\n        startTimecode: \"00:00:00\",\r\n        type: \"timedText\",\r\n        children: [\r\n          {\r\n            text: \"Text\",\r\n            marks: [\r\n              {\r\n                type: \"bold\",\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n  }\r\n\r\n  const { words, paragraphs, acte } = transcript;\r\n\r\n  const checkActe = (word, actes) => {\r\n    // console.log(\"test Acte : \");\r\n    const t = actes.filter(\r\n      (acte) => acte.start <= word.start && acte.end >= word.end\r\n    );\r\n    // console.log(t);\r\n    // console.log(parseInt(t[0].id, 10));\r\n    // console.log(typeof parseInt(t[0].id, 10));\r\n    // console.log(generateColor(parseInt(t[0].id, 10)));\r\n    // return t.length === 1 ? generateColor(t[0].id) : \"#ffff00\";\r\n    // return t.length == 1 ? \"#00ff00\" : \"#ffff00\";\r\n    return t[0].id;\r\n  };\r\n\r\n  // const generateText = (paragraph, words, acte) =>\r\n  //   words\r\n  //     .filter(\r\n  //       (word) => word.start >= paragraph.start && word.end <= paragraph.end\r\n  //     )\r\n  //     .map((w) => ({\r\n  //       text: w.text,\r\n  //       color: checkActe(w, acte),\r\n  //     }));\r\n\r\n  const generateText = (paragraph, words, actes) => {\r\n    // const concernedActe = actes.filter(\r\n    //   (acte) =>\r\n    //     (paragraph.start <= acte.end && acte.end <= paragraph.end) ||\r\n    //     (paragraph.start <= acte.start && acte.start <= paragraph.end) ||\r\n    //     (paragraph.start => acte.start && )\r\n    // );\r\n\r\n    // console.log(\"acte\");\r\n    // console.log(concernedActe);\r\n\r\n    const dic = words\r\n      .filter(\r\n        (word) => word.start >= paragraph.start && word.end <= paragraph.end\r\n      )\r\n      .map((w) => ({\r\n        text: w.text,\r\n        id: checkActe(w, acte),\r\n      }));\r\n\r\n    const set = new Set(dic.map(({ id }) => id));\r\n    console.log(\"test cc\");\r\n    const liste = [];\r\n    set.forEach((uniqueId) =>\r\n      liste.push({\r\n        text: dic\r\n          .filter((item) => item.id == uniqueId)\r\n          .map((w) => w.text)\r\n          .join(\" \"),\r\n        id: uniqueId,\r\n        color: generateColor(uniqueId),\r\n      })\r\n    );\r\n    // const test = dic.filter((item) => item.id == 3);\r\n    // console.log(set);\r\n\r\n    console.log(liste);\r\n    return liste;\r\n  };\r\n\r\n  // const checkActOfDialog = (actOfDialog) => (actOfDialog ? actOfDialog : \" \");\r\n\r\n  return paragraphs.map((paragraph) => ({\r\n    speaker: paragraph.speaker,\r\n    // actDialog: checkActOfDialog(paragraph.actdialog),\r\n\r\n    start: paragraph.start,\r\n    previousTimings: generatePreviousTimingsUpToCurrent(\r\n      generateTotalTimings(words),\r\n      paragraph.start\r\n    ),\r\n    // pre-computing the display of the formatting here so that it doesn't need to convert it in leaf render\r\n    startTimecode: shortTimecode(paragraph.start),\r\n    type: \"timedText\",\r\n    children: generateText(paragraph, words, acte),\r\n  }));\r\n};\r\n\r\nexport default convertDpeToSlate;\r\n","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\components\\index.js",["190","191"],"import React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { createEditor, Transforms } from \"slate\";\r\n// https://docs.slatejs.org/walkthroughs/01-installing-slate\r\n// Import the Slate components and React plugin.\r\nimport { Slate, Editable, withReact } from \"slate-react\";\r\nimport { withHistory } from \"slate-history\";\r\nimport convertDpeToSlate from \"../util/dpe-to-slate\";\r\nimport { useGlobalContext } from \"../../../components/Provider\";\r\n\r\nfunction isEmpty(obj) {\r\n  return Object.keys(obj).length === 0;\r\n}\r\n\r\nexport default function SlateTranscriptEditor(props) {\r\n  const { Player, confDemo } = useGlobalContext();\r\n  const { getTime } = Player;\r\n\r\n  const actLanguage = confDemo.getConf().actLanguage;\r\n\r\n  // const timeTemp = 1000000;\r\n  const timeTemp = getTime();\r\n  useEffect(() => {\r\n    // Add little offset to componsate react hook delay\r\n    const test = getTime();\r\n    handleTimeUpdated(test + 1);\r\n  }, [timeTemp]);\r\n\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const editor = useMemo(() => withReact(withHistory(createEditor())), []);\r\n  const [value, setValue] = useState([]);\r\n  const defaultShowSpeakersPreference =\r\n    typeof props.showSpeakers === \"boolean\" ? props.showSpeakers : true;\r\n  const defaultShowTimecodesPreference =\r\n    typeof props.showTimecodes === \"boolean\" ? props.showTimecodes : true;\r\n\r\n  const [showSpeakers] = useState(defaultShowSpeakersPreference);\r\n  const [showTimecodes] = useState(defaultShowTimecodesPreference);\r\n\r\n  useEffect(() => {\r\n    if (props.transcriptData) {\r\n      const res = convertDpeToSlate(props.transcriptData);\r\n      setValue(res);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // handles interim results for worrking with a Live STT\r\n  // useEffect(() => {\r\n  //   if (props.transcriptDataLive) {\r\n  //     const nodes = convertDpeToSlate(props.transcriptDataLive);\r\n  //     // if the user is selecting the / typing the text\r\n  //     // Transforms.insertNodes would insert the node at seleciton point\r\n  //     // instead we check if they are in the editor\r\n  //     if (editor.selection) {\r\n  //       // get the position of the last node\r\n  //       const positionLastNode = [editor.children.length];\r\n  //       // insert the new nodes at the end of the document\r\n  //       Transforms.insertNodes(editor, nodes, {\r\n  //         at: positionLastNode,\r\n  //       });\r\n  //     }\r\n  //     // use not having selection in the editor allows us to also handle the initial use case\r\n  //     // where the might be no initial results\r\n  //     else {\r\n  //       // if there is no selection the default for insertNodes is to add the nodes at the end\r\n  //       Transforms.insertNodes(editor, nodes);\r\n  //     }\r\n  //   }\r\n  //   // eslint-disable-next-line\r\n  // }, [props.transcriptDataLive]);\r\n\r\n  const handleTimeUpdated = (time) => {\r\n    setCurrentTime(time);\r\n    // TODO: setting duration here as a workaround\r\n    // setDuration(mediaRef.current.duration);\r\n  };\r\n\r\n  const renderElement = useCallback((props) => {\r\n    switch (props.element.type) {\r\n      case \"timedText\":\r\n        return <TimedTextElement {...props} />;\r\n      default:\r\n        return <DefaultElement {...props} />;\r\n    }\r\n  }, []);\r\n\r\n  const renderLeaf = ({ attributes, children, leaf }) => {\r\n    // console.log(attributes);\r\n    // console.log(children);\r\n    // console.log(leaf);\r\n    // const colorRandom = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n    // return leaf.text;\r\n    // console.log(colorRandom);\r\n\r\n    let text = leaf.text;\r\n    if (!leaf.text.includes(\"'\")) {\r\n      text += \" \";\r\n    }\r\n    // return <span style={{ color: colorRandom }}>{text}</span>;\r\n\r\n    return <span style={{ color: leaf.color }}>{text}</span>;\r\n  };\r\n\r\n  const TimedTextElement = useCallback(\r\n    (props) => {\r\n      const textLg = 6;\r\n      const textXl = 7;\r\n      return (\r\n        <Row {...props.attributes}>\r\n          {showTimecodes && (\r\n            <Col\r\n              contentEditable={false}\r\n              // xs={3}\r\n              sm={2}\r\n              md={4}\r\n              lg={3}\r\n              xl={2}\r\n              className={\"p-t-2 text-truncate\"}\r\n            >\r\n              <code\r\n                contentEditable={false}\r\n                style={{ cursor: \"pointer\" }}\r\n                className={\"timecode text-muted unselectable\"}\r\n                onClick={handleTimedTextClick}\r\n                title={props.element.startTimecode}\r\n                data-start={props.element.start}\r\n              >\r\n                {props.element.startTimecode}\r\n              </code>\r\n            </Col>\r\n          )}\r\n          {showSpeakers && (\r\n            <Col\r\n              contentEditable={false}\r\n              // xs={3}\r\n              sm={10}\r\n              md={8}\r\n              lg={3}\r\n              xl={3}\r\n              className={\"p-t-2 text-truncate\"}\r\n            >\r\n              <span\r\n                contentEditable={false}\r\n                className={\"text-truncate text-muted unselectable\"}\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                  width: \"100%\",\r\n                  textTransform: \"uppercase\",\r\n                }}\r\n                // title={props.element.speaker.toUpperCase()}\r\n                title={props.element.speaker}\r\n                // onClick={handleSetSpeakerName.bind(this, props.element)}\r\n              >\r\n                {\" \"}\r\n                {props.element.speaker}\r\n              </span>\r\n            </Col>\r\n          )}\r\n\r\n          <Col\r\n            xs={12}\r\n            sm={12}\r\n            md={12}\r\n            lg={textLg}\r\n            xl={textXl}\r\n            className={\"p-t-2 mx-auto\"}\r\n          >\r\n            <Row>\r\n              <Col xs={!actLanguage ? 12 : 9}>\r\n                <span\r\n                  className={\"timecode text\"}\r\n                  data-start={props.element.start}\r\n                  data-previous-timings={props.element.previousTimings}\r\n                  title={props.element.start}\r\n                >\r\n                  {props.children}\r\n                </span>\r\n              </Col>\r\n              {actLanguage && <Col xs={3}> </Col>}\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      );\r\n    },\r\n    [actLanguage, showTimecodes, showSpeakers]\r\n  );\r\n\r\n  const DefaultElement = (props) => {\r\n    return <p {...props.attributes}>{props.children}</p>;\r\n  };\r\n\r\n  const handleTimedTextClick = (e) => {\r\n    if (e.target.classList.contains(\"timecode\")) {\r\n      // eslint-disable-next-line\r\n      const start = e.target.dataset.start;\r\n      // if (mediaRef && mediaRef.current) {\r\n      //   mediaRef.current.currentTime = parseInt(start);\r\n      //   mediaRef.current.play();\r\n      // }\r\n    } else if (e.target.dataset.slateString) {\r\n      if (e.target.parentNode.dataset.start) {\r\n        // eslint-disable-next-line\r\n        const start = e.target.parentNode.dataset.start;\r\n        // if (mediaRef && mediaRef.current && start) {\r\n        //   mediaRef.current.currentTime = parseInt(start);\r\n        //   mediaRef.current.play();\r\n        // }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * See explanation in `src/utils/dpe-to-slate/index.js` for how this function works with css injection\r\n   * to provide current paragaph's highlight.\r\n   * @param {Number} currentTime - float in seconds\r\n   */\r\n  const generatePreviousTimingsUpToCurrent = (currentTime) => {\r\n    // edge case - empty transcription\r\n    if (isEmpty(props.transcriptData)) {\r\n      return \"\";\r\n    }\r\n    const lastWordStartTime =\r\n      props.transcriptData.words[props.transcriptData.words.length - 1].start;\r\n    const lastWordStartTimeInt = parseInt(lastWordStartTime);\r\n    const emptyListOfTimes = Array(lastWordStartTimeInt);\r\n    const listOfTimesInt = [...emptyListOfTimes.keys()];\r\n    const listOfTimesUpToCurrentTimeInt = listOfTimesInt.splice(\r\n      0,\r\n      currentTime,\r\n      0\r\n    );\r\n    const stringlistOfTimesUpToCurrentTimeInt = listOfTimesUpToCurrentTimeInt.join(\r\n      \" \"\r\n    );\r\n    return stringlistOfTimesUpToCurrentTimeInt;\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        backgroundColor: \"#fff\",\r\n        paddingTop: \"1em\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        justifyContent: \"center\",\r\n        border: \"none\",\r\n      }}\r\n    >\r\n      {/* <style scoped>\r\n        {`\r\n              .timecode[data-previous-timings*=\"${mediaRef &&\r\n                mediaRef.current &&\r\n                mediaRef.current.duration &&\r\n                generatePreviousTimingsUpToCurrent(parseInt(currentTime))}\"]{\r\n                color:  #c8c8c8 !important;\r\n              }\r\n          `}\r\n          </style> */}\r\n      <style scoped>\r\n        {`  .timecode[data-previous-timings*=\"${generatePreviousTimingsUpToCurrent(\r\n          parseInt(currentTime)\r\n        )}\"]{\r\n              opacity:  0.1 !important;\r\n            }`}\r\n      </style>\r\n      <style scoped>\r\n        {`.editor-wrapper-container{\r\n                padding: 8px 16px;\r\n                background: #f9f9f9;\r\n                box-shadow: 0 0 10px #ccc;\r\n                height: 40vh;\r\n                width: 100%;\r\n                overflow: auto;\r\n                justify-content: center,\r\n              }\r\n              /* https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\r\n              TODO: only working in Chrome, not working in Firefox, and Safari - OSX\r\n              if selecting text, not showing selection\r\n              Commented out because it means cannot select speakers and timecode anymore\r\n              which is the intended default behavior but needs to come with export\r\n              functionality to export as plain text, word etc.. otherwise user won't be able\r\n              to get text out of component with timecodes and speaker names in the interim */\r\n              .unselectable {\r\n                -moz-user-select: none;\r\n                -webkit-user-select: none;\r\n                -ms-user-select: none;\r\n                user-select: none;\r\n              }\r\n              .timecode:hover{\r\n                text-decoration: underline;\r\n              }\r\n              .timecode.text:hover{\r\n                text-decoration:none;\r\n              }\r\n              `}\r\n      </style>\r\n\r\n      {value.length !== 0 ? (\r\n        <>\r\n          <section className=\"editor-wrapper-container\">\r\n            <Slate\r\n              editor={editor}\r\n              value={value}\r\n              onChange={(value) => {\r\n                if (props.handleAutoSaveChanges) {\r\n                  props.handleAutoSaveChanges(value);\r\n                }\r\n                return setValue(value);\r\n              }}\r\n            >\r\n              <Editable\r\n                readOnly={true}\r\n                renderElement={renderElement}\r\n                renderLeaf={renderLeaf}\r\n              />\r\n            </Slate>\r\n          </section>\r\n        </>\r\n      ) : (\r\n        <section className=\"text-center\">\r\n          <i className=\"text-center\">Loading...</i>\r\n        </section>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nSlateTranscriptEditor.propTypes = {\r\n  transcriptData: PropTypes.object.isRequired,\r\n  mediaUrl: PropTypes.string.isRequired,\r\n  handleSaveEditor: PropTypes.func,\r\n  handleAutoSaveChanges: PropTypes.func,\r\n  autoSaveContentType: PropTypes.string,\r\n  isEditable: PropTypes.bool,\r\n  showTimecodes: PropTypes.bool,\r\n  showSpeakers: PropTypes.bool,\r\n  title: PropTypes.string,\r\n  showTitle: PropTypes.bool,\r\n  mediaType: PropTypes.string,\r\n  transcriptDataLive: PropTypes.object,\r\n};\r\n\r\nSlateTranscriptEditor.defaultProps = {\r\n  showTitle: false,\r\n  showTimecodes: true,\r\n  showSpeakers: true,\r\n  mediaType: \"digitalpaperedit\",\r\n  isEditable: true,\r\n};\r\n","D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\export-adapters\\txt\\index.js",[],"D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\timecode-converter\\src\\secondsToTimecode.js",[],"D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\timecode-converter\\src\\padTimeToTimecode.js",[],"D:\\react\\7\\linto-demo\\src\\dependencies\\slate-transcript-editor\\util\\timecode-converter\\src\\timecodeToSeconds.js",[],{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"192","replacedBy":"196"},{"ruleId":"194","replacedBy":"197"},{"ruleId":"192","replacedBy":"198"},{"ruleId":"194","replacedBy":"199"},{"ruleId":"192","replacedBy":"200"},{"ruleId":"194","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":17,"column":3,"nodeType":"204","messageId":"205","endLine":17,"endColumn":12},{"ruleId":"202","severity":1,"message":"206","line":18,"column":3,"nodeType":"204","messageId":"205","endLine":18,"endColumn":16},{"ruleId":"202","severity":1,"message":"207","line":19,"column":3,"nodeType":"204","messageId":"205","endLine":19,"endColumn":14},{"ruleId":"208","severity":1,"message":"209","line":138,"column":37,"nodeType":"210","messageId":"205","endLine":138,"endColumn":39},{"ruleId":"211","severity":1,"message":"212","line":6,"column":24,"nodeType":"213","messageId":"214","endLine":6,"endColumn":34},{"ruleId":"215","severity":1,"message":"216","line":30,"column":6,"nodeType":"217","endLine":30,"endColumn":16,"suggestions":"218"},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],["219"],["220"],["219"],["220"],["219"],["220"],"no-dupe-keys","Duplicate key 'waveColor'.","ObjectExpression","unexpected","Duplicate key 'progressColor'.","Duplicate key 'cursorColor'.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-unused-vars","'Transforms' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTime'. Either include it or remove the dependency array.","ArrayExpression",["221"],"no-global-assign","no-unsafe-negation",{"desc":"222","fix":"223"},"Update the dependencies array to be: [getTime, timeTemp]",{"range":"224","text":"225"},[1113,1123],"[getTime, timeTemp]"]